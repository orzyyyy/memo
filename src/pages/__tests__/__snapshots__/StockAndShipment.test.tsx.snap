// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StockAndShipment render correctly 1`] = `
<StockAndShipment
  formData={
    Object {
      "height": 103,
      "heightError": false,
      "heightMessage": "error",
      "length": 101,
      "lengthError": false,
      "lengthMessage": "error",
      "materialCost": 100,
      "materialCostError": false,
      "materialCostMessage": "error",
      "materialType": 0,
      "materialTypeError": false,
      "materialTypeMessage": "error",
      "type": 1,
      "weight": 104,
      "weightError": false,
      "weightMessage": "error",
      "width": 102,
      "widthError": false,
      "widthMessage": "error",
    }
  }
  formOptions={
    Object {
      "materialType": Array [
        Object {
          "text": "materialTypeText",
          "value": "materialTypeValue",
        },
      ],
      "type": Array [
        Object {
          "text": "typeText",
          "value": "typeValue",
        },
      ],
    }
  }
  onChange={[MockFunction]}
  onSubmit={[MockFunction]}
>
  <div
    className="makeStyles-container-1"
  >
    <WithStyles(ForwardRef(FormControl))
      className="makeStyles-formControl-3"
      fullWidth={true}
      required={true}
    >
      <ForwardRef(FormControl)
        className="makeStyles-formControl-3"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth",
            "marginDense": "MuiFormControl-marginDense",
            "marginNormal": "MuiFormControl-marginNormal",
            "root": "MuiFormControl-root",
          }
        }
        fullWidth={true}
        required={true}
      >
        <div
          className="MuiFormControl-root makeStyles-formControl-3 MuiFormControl-fullWidth"
        >
          <WithStyles(ForwardRef(InputLabel))>
            <ForwardRef(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated",
                  "asterisk": "MuiInputLabel-asterisk",
                  "disabled": "Mui-disabled",
                  "error": "Mui-error",
                  "filled": "MuiInputLabel-filled",
                  "focused": "Mui-focused",
                  "formControl": "MuiInputLabel-formControl",
                  "marginDense": "MuiInputLabel-marginDense",
                  "outlined": "MuiInputLabel-outlined",
                  "required": "Mui-required",
                  "root": "MuiInputLabel-root",
                  "shrink": "MuiInputLabel-shrink",
                }
              }
            >
              <WithStyles(ForwardRef(FormLabel))
                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                classes={
                  Object {
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "focused": "Mui-focused",
                    "required": "Mui-required",
                  }
                }
                data-shrink={true}
              >
                <ForwardRef(FormLabel)
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                  classes={
                    Object {
                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled Mui-disabled",
                      "error": "Mui-error Mui-error",
                      "filled": "MuiFormLabel-filled",
                      "focused": "Mui-focused Mui-focused",
                      "required": "Mui-required Mui-required",
                      "root": "MuiFormLabel-root",
                    }
                  }
                  data-shrink={true}
                >
                  <label
                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                    data-shrink={true}
                  >
                    材料类型 1
                    <span
                      className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                    >
                       
                      *
                    </span>
                  </label>
                </ForwardRef(FormLabel)>
              </WithStyles(ForwardRef(FormLabel))>
            </ForwardRef(InputLabel)>
          </WithStyles(ForwardRef(InputLabel))>
          <WithStyles(ForwardRef(Select))
            onChange={[Function]}
            value={1}
          >
            <ForwardRef(Select)
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "filled": "MuiSelect-filled",
                  "icon": "MuiSelect-icon",
                  "iconFilled": "MuiSelect-iconFilled",
                  "iconOpen": "MuiSelect-iconOpen",
                  "iconOutlined": "MuiSelect-iconOutlined",
                  "outlined": "MuiSelect-outlined",
                  "root": "MuiSelect-root",
                  "select": "MuiSelect-select",
                  "selectMenu": "MuiSelect-selectMenu",
                }
              }
              onChange={[Function]}
              value={1}
            >
              <WithStyles(ForwardRef(Input))
                inputComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "propTypes": Object {
                      "IconComponent": [Function],
                      "MenuProps": [Function],
                      "SelectDisplayProps": [Function],
                      "autoFocus": [Function],
                      "autoWidth": [Function],
                      "children": [Function],
                      "className": [Function],
                      "classes": [Function],
                      "defaultValue": [Function],
                      "disabled": [Function],
                      "displayEmpty": [Function],
                      "inputRef": [Function],
                      "labelId": [Function],
                      "multiple": [Function],
                      "name": [Function],
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onClose": [Function],
                      "onFocus": [Function],
                      "onOpen": [Function],
                      "open": [Function],
                      "readOnly": [Function],
                      "renderValue": [Function],
                      "required": [Function],
                      "tabIndex": [Function],
                      "type": [Function],
                      "value": [Function],
                      "variant": [Function],
                    },
                    "render": [Function],
                  }
                }
                inputProps={
                  Object {
                    "IconComponent": Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "displayName": "ArrowDropDownIcon",
                      "muiName": "SvgIcon",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                    },
                    "MenuProps": undefined,
                    "SelectDisplayProps": Object {
                      "id": undefined,
                    },
                    "autoWidth": false,
                    "children": Array [
                      <ForwardRef(WithStyles)
                        value="typeValue"
                      >
                        typeText
                      </ForwardRef(WithStyles)>,
                    ],
                    "classes": Object {
                      "disabled": "Mui-disabled",
                      "filled": "MuiSelect-filled",
                      "icon": "MuiSelect-icon",
                      "iconFilled": "MuiSelect-iconFilled",
                      "iconOpen": "MuiSelect-iconOpen",
                      "iconOutlined": "MuiSelect-iconOutlined",
                      "outlined": "MuiSelect-outlined",
                      "root": "MuiSelect-root",
                      "select": "MuiSelect-select",
                      "selectMenu": "MuiSelect-selectMenu",
                    },
                    "displayEmpty": false,
                    "labelId": undefined,
                    "multiple": false,
                    "onClose": undefined,
                    "onOpen": undefined,
                    "open": undefined,
                    "renderValue": undefined,
                    "type": undefined,
                    "variant": "standard",
                  }
                }
                onChange={[Function]}
                select={true}
                value={1}
              >
                <ForwardRef(Input)
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInput-formControl",
                      "fullWidth": "MuiInput-fullWidth",
                      "input": "MuiInput-input",
                      "inputMarginDense": "MuiInput-inputMarginDense",
                      "inputMultiline": "MuiInput-inputMultiline",
                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                      "multiline": "MuiInput-multiline",
                      "root": "MuiInput-root",
                      "underline": "MuiInput-underline",
                    }
                  }
                  inputComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "IconComponent": [Function],
                        "MenuProps": [Function],
                        "SelectDisplayProps": [Function],
                        "autoFocus": [Function],
                        "autoWidth": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "displayEmpty": [Function],
                        "inputRef": [Function],
                        "labelId": [Function],
                        "multiple": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onClose": [Function],
                        "onFocus": [Function],
                        "onOpen": [Function],
                        "open": [Function],
                        "readOnly": [Function],
                        "renderValue": [Function],
                        "required": [Function],
                        "tabIndex": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  inputProps={
                    Object {
                      "IconComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "displayName": "ArrowDropDownIcon",
                        "muiName": "SvgIcon",
                        "type": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "render": [Function],
                        },
                      },
                      "MenuProps": undefined,
                      "SelectDisplayProps": Object {
                        "id": undefined,
                      },
                      "autoWidth": false,
                      "children": Array [
                        <ForwardRef(WithStyles)
                          value="typeValue"
                        >
                          typeText
                        </ForwardRef(WithStyles)>,
                      ],
                      "classes": Object {
                        "disabled": "Mui-disabled",
                        "filled": "MuiSelect-filled",
                        "icon": "MuiSelect-icon",
                        "iconFilled": "MuiSelect-iconFilled",
                        "iconOpen": "MuiSelect-iconOpen",
                        "iconOutlined": "MuiSelect-iconOutlined",
                        "outlined": "MuiSelect-outlined",
                        "root": "MuiSelect-root",
                        "select": "MuiSelect-select",
                        "selectMenu": "MuiSelect-selectMenu",
                      },
                      "displayEmpty": false,
                      "labelId": undefined,
                      "multiple": false,
                      "onClose": undefined,
                      "onOpen": undefined,
                      "open": undefined,
                      "renderValue": undefined,
                      "type": undefined,
                      "variant": "standard",
                    }
                  }
                  onChange={[Function]}
                  select={true}
                  value={1}
                >
                  <WithStyles(ForwardRef(InputBase))
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root MuiInput-underline",
                        "underline": null,
                      }
                    }
                    fullWidth={false}
                    inputComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "propTypes": Object {
                          "IconComponent": [Function],
                          "MenuProps": [Function],
                          "SelectDisplayProps": [Function],
                          "autoFocus": [Function],
                          "autoWidth": [Function],
                          "children": [Function],
                          "className": [Function],
                          "classes": [Function],
                          "defaultValue": [Function],
                          "disabled": [Function],
                          "displayEmpty": [Function],
                          "inputRef": [Function],
                          "labelId": [Function],
                          "multiple": [Function],
                          "name": [Function],
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onClose": [Function],
                          "onFocus": [Function],
                          "onOpen": [Function],
                          "open": [Function],
                          "readOnly": [Function],
                          "renderValue": [Function],
                          "required": [Function],
                          "tabIndex": [Function],
                          "type": [Function],
                          "value": [Function],
                          "variant": [Function],
                        },
                        "render": [Function],
                      }
                    }
                    inputProps={
                      Object {
                        "IconComponent": Object {
                          "$$typeof": Symbol(react.memo),
                          "compare": null,
                          "displayName": "ArrowDropDownIcon",
                          "muiName": "SvgIcon",
                          "type": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          },
                        },
                        "MenuProps": undefined,
                        "SelectDisplayProps": Object {
                          "id": undefined,
                        },
                        "autoWidth": false,
                        "children": Array [
                          <ForwardRef(WithStyles)
                            value="typeValue"
                          >
                            typeText
                          </ForwardRef(WithStyles)>,
                        ],
                        "classes": Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        },
                        "displayEmpty": false,
                        "labelId": undefined,
                        "multiple": false,
                        "onClose": undefined,
                        "onOpen": undefined,
                        "open": undefined,
                        "renderValue": undefined,
                        "type": undefined,
                        "variant": "standard",
                      }
                    }
                    multiline={false}
                    onChange={[Function]}
                    select={true}
                    type="text"
                    value={1}
                  >
                    <ForwardRef(InputBase)
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "disabled": "Mui-disabled Mui-disabled",
                          "error": "Mui-error Mui-error",
                          "focused": "Mui-focused Mui-focused",
                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                          "input": "MuiInputBase-input MuiInput-input",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                          "inputSelect": "MuiInputBase-inputSelect",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense",
                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                        }
                      }
                      fullWidth={false}
                      inputComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "IconComponent": [Function],
                            "MenuProps": [Function],
                            "SelectDisplayProps": [Function],
                            "autoFocus": [Function],
                            "autoWidth": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "displayEmpty": [Function],
                            "inputRef": [Function],
                            "labelId": [Function],
                            "multiple": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onClose": [Function],
                            "onFocus": [Function],
                            "onOpen": [Function],
                            "open": [Function],
                            "readOnly": [Function],
                            "renderValue": [Function],
                            "required": [Function],
                            "tabIndex": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        }
                      }
                      inputProps={
                        Object {
                          "IconComponent": Object {
                            "$$typeof": Symbol(react.memo),
                            "compare": null,
                            "displayName": "ArrowDropDownIcon",
                            "muiName": "SvgIcon",
                            "type": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "render": [Function],
                            },
                          },
                          "MenuProps": undefined,
                          "SelectDisplayProps": Object {
                            "id": undefined,
                          },
                          "autoWidth": false,
                          "children": Array [
                            <ForwardRef(WithStyles)
                              value="typeValue"
                            >
                              typeText
                            </ForwardRef(WithStyles)>,
                          ],
                          "classes": Object {
                            "disabled": "Mui-disabled",
                            "filled": "MuiSelect-filled",
                            "icon": "MuiSelect-icon",
                            "iconFilled": "MuiSelect-iconFilled",
                            "iconOpen": "MuiSelect-iconOpen",
                            "iconOutlined": "MuiSelect-iconOutlined",
                            "outlined": "MuiSelect-outlined",
                            "root": "MuiSelect-root",
                            "select": "MuiSelect-select",
                            "selectMenu": "MuiSelect-selectMenu",
                          },
                          "displayEmpty": false,
                          "labelId": undefined,
                          "multiple": false,
                          "onClose": undefined,
                          "onOpen": undefined,
                          "open": undefined,
                          "renderValue": undefined,
                          "type": undefined,
                          "variant": "standard",
                        }
                      }
                      multiline={false}
                      onChange={[Function]}
                      select={true}
                      type="text"
                      value={1}
                    >
                      <div
                        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                        onClick={[Function]}
                      >
                        <ForwardRef(SelectInput)
                          IconComponent={
                            Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "displayName": "ArrowDropDownIcon",
                              "muiName": "SvgIcon",
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            }
                          }
                          SelectDisplayProps={
                            Object {
                              "id": undefined,
                            }
                          }
                          aria-invalid={false}
                          autoWidth={false}
                          className="MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            }
                          }
                          disabled={false}
                          displayEmpty={false}
                          inputRef={[Function]}
                          multiple={false}
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={true}
                          value={1}
                          variant="standard"
                        >
                          <div
                            aria-haspopup="listbox"
                            aria-labelledby=" "
                            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "&#8203;",
                                }
                              }
                            />
                          </div>
                          <input
                            onAnimationStart={[Function]}
                            type="hidden"
                            value={1}
                          />
                          <ForwardRef
                            className="MuiSelect-icon"
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              className="MuiSelect-icon"
                            >
                              <ForwardRef(SvgIcon)
                                className="MuiSelect-icon"
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden="true"
                                  className="MuiSvgIcon-root MuiSelect-icon"
                                  focusable="false"
                                  role="presentation"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M7 10l5 5 5-5z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef>
                          <WithStyles(ForwardRef(Menu))
                            MenuListProps={
                              Object {
                                "aria-labelledby": undefined,
                                "disableListWrap": true,
                                "role": "listbox",
                              }
                            }
                            PaperProps={
                              Object {
                                "style": Object {
                                  "minWidth": undefined,
                                },
                              }
                            }
                            anchorEl={
                              <div
                                aria-haspopup="listbox"
                                aria-labelledby=" "
                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                                role="button"
                                tabindex="0"
                              >
                                <span>
                                  ​
                                </span>
                              </div>
                            }
                            id="menu-"
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Menu)
                              MenuListProps={
                                Object {
                                  "aria-labelledby": undefined,
                                  "disableListWrap": true,
                                  "role": "listbox",
                                }
                              }
                              PaperProps={
                                Object {
                                  "style": Object {
                                    "minWidth": undefined,
                                  },
                                }
                              }
                              anchorEl={
                                <div
                                  aria-haspopup="listbox"
                                  aria-labelledby=" "
                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                                  role="button"
                                  tabindex="0"
                                >
                                  <span>
                                    ​
                                  </span>
                                </div>
                              }
                              classes={
                                Object {
                                  "list": "MuiMenu-list",
                                  "paper": "MuiMenu-paper",
                                }
                              }
                              id="menu-"
                              onClose={[Function]}
                              open={false}
                            >
                              <WithStyles(ForwardRef(Popover))
                                PaperProps={
                                  Object {
                                    "classes": Object {
                                      "root": "MuiMenu-paper",
                                    },
                                    "style": Object {
                                      "minWidth": undefined,
                                    },
                                  }
                                }
                                anchorEl={
                                  <div
                                    aria-haspopup="listbox"
                                    aria-labelledby=" "
                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                                    role="button"
                                    tabindex="0"
                                  >
                                    <span>
                                      ​
                                    </span>
                                  </div>
                                }
                                anchorOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                getContentAnchorEl={[Function]}
                                id="menu-"
                                onClose={[Function]}
                                onEntering={[Function]}
                                open={false}
                                transformOrigin={
                                  Object {
                                    "horizontal": "left",
                                    "vertical": "top",
                                  }
                                }
                                transitionDuration="auto"
                              >
                                <ForwardRef(Popover)
                                  PaperProps={
                                    Object {
                                      "classes": Object {
                                        "root": "MuiMenu-paper",
                                      },
                                      "style": Object {
                                        "minWidth": undefined,
                                      },
                                    }
                                  }
                                  anchorEl={
                                    <div
                                      aria-haspopup="listbox"
                                      aria-labelledby=" "
                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input MuiInputBase-inputSelect"
                                      role="button"
                                      tabindex="0"
                                    >
                                      <span>
                                        ​
                                      </span>
                                    </div>
                                  }
                                  anchorOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  classes={
                                    Object {
                                      "paper": "MuiPopover-paper",
                                      "root": "MuiPopover-root",
                                    }
                                  }
                                  getContentAnchorEl={[Function]}
                                  id="menu-"
                                  onClose={[Function]}
                                  onEntering={[Function]}
                                  open={false}
                                  transformOrigin={
                                    Object {
                                      "horizontal": "left",
                                      "vertical": "top",
                                    }
                                  }
                                  transitionDuration="auto"
                                >
                                  <ForwardRef(Modal)
                                    BackdropProps={
                                      Object {
                                        "invisible": true,
                                      }
                                    }
                                    className="MuiPopover-root"
                                    container={<body />}
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  />
                                </ForwardRef(Popover)>
                              </WithStyles(ForwardRef(Popover))>
                            </ForwardRef(Menu)>
                          </WithStyles(ForwardRef(Menu))>
                        </ForwardRef(SelectInput)>
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </ForwardRef(Input)>
              </WithStyles(ForwardRef(Input))>
            </ForwardRef(Select)>
          </WithStyles(ForwardRef(Select))>
        </div>
      </ForwardRef(FormControl)>
    </WithStyles(ForwardRef(FormControl))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="length"
      xs={4}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={4}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-4"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            error={false}
            required={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              error={false}
              required={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                        >
                          长
                          <span
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      mm
                    </ForwardRef(WithStyles)>
                  }
                  onChange={[Function]}
                  value={101}
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        mm
                      </ForwardRef(WithStyles)>
                    }
                    onChange={[Function]}
                    value={101}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          mm
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value={101}
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            mm
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value={101}
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            disabled={false}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                            value={101}
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      mm
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root MuiFormHelperText-filled Mui-required"
                    >
                      error
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="width"
      xs={4}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={4}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-4"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            error={false}
            required={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              error={false}
              required={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                        >
                          宽
                          <span
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      mm
                    </ForwardRef(WithStyles)>
                  }
                  onChange={[Function]}
                  value={102}
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        mm
                      </ForwardRef(WithStyles)>
                    }
                    onChange={[Function]}
                    value={102}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          mm
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value={102}
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            mm
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value={102}
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            disabled={false}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                            value={102}
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      mm
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root MuiFormHelperText-filled Mui-required"
                    >
                      error
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="height"
      xs={4}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={4}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-4"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            error={false}
            required={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              error={false}
              required={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                        >
                          高
                          <span
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      mm
                    </ForwardRef(WithStyles)>
                  }
                  onChange={[Function]}
                  value={103}
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        mm
                      </ForwardRef(WithStyles)>
                    }
                    onChange={[Function]}
                    value={103}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          mm
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value={103}
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            mm
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value={103}
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            disabled={false}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                            value={103}
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      mm
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root MuiFormHelperText-filled Mui-required"
                    >
                      error
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="weight"
      xs={6}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={6}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            error={false}
            required={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              error={false}
              required={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                        >
                          实际重量
                          <span
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      kg
                    </ForwardRef(WithStyles)>
                  }
                  onChange={[Function]}
                  value={104}
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        kg
                      </ForwardRef(WithStyles)>
                    }
                    onChange={[Function]}
                    value={104}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          kg
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value={104}
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            kg
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value={104}
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            disabled={false}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                            value={104}
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      kg
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root MuiFormHelperText-filled Mui-required"
                    >
                      error
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="pre-weight"
      xs={6}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={6}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            disabled={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              disabled={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-disabled Mui-disabled MuiFormLabel-filled"
                          data-shrink={true}
                        >
                          预估重量
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      kg
                    </ForwardRef(WithStyles)>
                  }
                  value="nodejs"
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        kg
                      </ForwardRef(WithStyles)>
                    }
                    value="nodejs"
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          kg
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      type="text"
                      value="nodejs"
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            kg
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        type="text"
                        value="nodejs"
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled MuiInputBase-inputAdornedEnd"
                            disabled={true}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            type="text"
                            value="nodejs"
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      kg
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root Mui-disabled MuiFormHelperText-filled"
                    >
                      计算公式：体积 x 密度
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(FormControl))
      className="makeStyles-formControl-3"
      error={false}
      fullWidth={true}
    >
      <ForwardRef(FormControl)
        className="makeStyles-formControl-3"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth",
            "marginDense": "MuiFormControl-marginDense",
            "marginNormal": "MuiFormControl-marginNormal",
            "root": "MuiFormControl-root",
          }
        }
        error={false}
        fullWidth={true}
      >
        <div
          className="MuiFormControl-root makeStyles-formControl-3 MuiFormControl-fullWidth"
        >
          <WithStyles(ForwardRef(Autocomplete))
            aria-controls="material-type"
            getOptionLabel={[Function]}
            id="material-type"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "text": "materialTypeText",
                  "value": "materialTypeValue",
                },
              ]
            }
            renderInput={[Function]}
            value={0}
          >
            <ForwardRef(Autocomplete)
              aria-controls="material-type"
              classes={
                Object {
                  "clearIndicator": "MuiAutocomplete-clearIndicator",
                  "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
                  "focused": "Mui-focused",
                  "groupLabel": "MuiAutocomplete-groupLabel",
                  "groupUl": "MuiAutocomplete-groupUl",
                  "input": "MuiAutocomplete-input",
                  "inputFocused": "MuiAutocomplete-inputFocused",
                  "inputRoot": "MuiAutocomplete-inputRoot",
                  "listbox": "MuiAutocomplete-listbox",
                  "loading": "MuiAutocomplete-loading",
                  "noOptions": "MuiAutocomplete-noOptions",
                  "option": "MuiAutocomplete-option",
                  "paper": "MuiAutocomplete-paper",
                  "popup": "MuiAutocomplete-popup",
                  "popupIndicator": "MuiAutocomplete-popupIndicator",
                  "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
                  "root": "MuiAutocomplete-root",
                  "tag": "MuiAutocomplete-tag",
                }
              }
              getOptionLabel={[Function]}
              id="material-type"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "text": "materialTypeText",
                    "value": "materialTypeValue",
                  },
                ]
              }
              renderInput={[Function]}
              value={0}
            >
              <div
                aria-controls="material-type"
                aria-expanded={false}
                aria-owns={null}
                className="MuiAutocomplete-root"
                onKeyDown={[Function]}
                role="combobox"
              >
                <WithStyles(ForwardRef(TextField))
                  InputLabelProps={
                    Object {
                      "id": "material-type-label",
                    }
                  }
                  InputProps={
                    Object {
                      "className": "MuiAutocomplete-inputRoot",
                      "endAdornment": <React.Fragment>
                        <ForwardRef(WithStyles)
                          className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          tabIndex={-1}
                          title="Clear"
                        >
                          <Memo(CloseIcon)
                            fontSize="small"
                          />
                        </ForwardRef(WithStyles)>
                        <ForwardRef(WithStyles)
                          className="MuiAutocomplete-popupIndicator"
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          tabIndex={-1}
                          title="Open popup"
                        >
                          <Memo(ArrowDropDownIcon) />
                        </ForwardRef(WithStyles)>
                      </React.Fragment>,
                      "startAdornment": undefined,
                    }
                  }
                  error={false}
                  fullWidth={true}
                  inputProps={
                    Object {
                      "aria-autocomplete": "list",
                      "aria-controls": "material-type-listbox",
                      "autoCapitalize": "none",
                      "autoComplete": "disabled",
                      "autoCorrect": "off",
                      "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                      "id": "material-type",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "ref": Object {
                        "current": <input
                          aria-autocomplete="list"
                          aria-controls="material-type-listbox"
                          aria-invalid="false"
                          autocapitalize="none"
                          autocomplete="disabled"
                          autocorrect="off"
                          class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                          id="material-type"
                          required=""
                          spellcheck="false"
                          type="text"
                          value=""
                        />,
                      },
                      "spellCheck": "false",
                      "value": undefined,
                    }
                  }
                  label="材料类型 2"
                  margin="normal"
                  required={true}
                >
                  <ForwardRef(TextField)
                    InputLabelProps={
                      Object {
                        "id": "material-type-label",
                      }
                    }
                    InputProps={
                      Object {
                        "className": "MuiAutocomplete-inputRoot",
                        "endAdornment": <React.Fragment>
                          <ForwardRef(WithStyles)
                            className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                            onClick={[Function]}
                            onMouseDown={[Function]}
                            tabIndex={-1}
                            title="Clear"
                          >
                            <Memo(CloseIcon)
                              fontSize="small"
                            />
                          </ForwardRef(WithStyles)>
                          <ForwardRef(WithStyles)
                            className="MuiAutocomplete-popupIndicator"
                            onClick={[Function]}
                            onMouseDown={[Function]}
                            tabIndex={-1}
                            title="Open popup"
                          >
                            <Memo(ArrowDropDownIcon) />
                          </ForwardRef(WithStyles)>
                        </React.Fragment>,
                        "startAdornment": undefined,
                      }
                    }
                    classes={
                      Object {
                        "root": "MuiTextField-root",
                      }
                    }
                    error={false}
                    fullWidth={true}
                    inputProps={
                      Object {
                        "aria-autocomplete": "list",
                        "aria-controls": "material-type-listbox",
                        "autoCapitalize": "none",
                        "autoComplete": "disabled",
                        "autoCorrect": "off",
                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                        "id": "material-type",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "ref": Object {
                          "current": <input
                            aria-autocomplete="list"
                            aria-controls="material-type-listbox"
                            aria-invalid="false"
                            autocapitalize="none"
                            autocomplete="disabled"
                            autocorrect="off"
                            class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                            id="material-type"
                            required=""
                            spellcheck="false"
                            type="text"
                            value=""
                          />,
                        },
                        "spellCheck": "false",
                        "value": undefined,
                      }
                    }
                    label="材料类型 2"
                    margin="normal"
                    required={true}
                  >
                    <WithStyles(ForwardRef(FormControl))
                      className="MuiTextField-root"
                      error={false}
                      fullWidth={true}
                      margin="normal"
                      required={true}
                      variant="standard"
                    >
                      <ForwardRef(FormControl)
                        className="MuiTextField-root"
                        classes={
                          Object {
                            "fullWidth": "MuiFormControl-fullWidth",
                            "marginDense": "MuiFormControl-marginDense",
                            "marginNormal": "MuiFormControl-marginNormal",
                            "root": "MuiFormControl-root",
                          }
                        }
                        error={false}
                        fullWidth={true}
                        margin="normal"
                        required={true}
                        variant="standard"
                      >
                        <div
                          className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                        >
                          <WithStyles(ForwardRef(InputLabel))
                            id="material-type-label"
                          >
                            <ForwardRef(InputLabel)
                              classes={
                                Object {
                                  "animated": "MuiInputLabel-animated",
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiInputLabel-filled",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInputLabel-formControl",
                                  "marginDense": "MuiInputLabel-marginDense",
                                  "outlined": "MuiInputLabel-outlined",
                                  "required": "Mui-required",
                                  "root": "MuiInputLabel-root",
                                  "shrink": "MuiInputLabel-shrink",
                                }
                              }
                              id="material-type-label"
                            >
                              <WithStyles(ForwardRef(FormLabel))
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                classes={
                                  Object {
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "required": "Mui-required",
                                  }
                                }
                                data-shrink={false}
                                id="material-type-label"
                              >
                                <ForwardRef(FormLabel)
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                  classes={
                                    Object {
                                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "filled": "MuiFormLabel-filled",
                                      "focused": "Mui-focused Mui-focused",
                                      "required": "Mui-required Mui-required",
                                      "root": "MuiFormLabel-root",
                                    }
                                  }
                                  data-shrink={false}
                                  id="material-type-label"
                                >
                                  <label
                                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-required Mui-required"
                                    data-shrink={false}
                                    id="material-type-label"
                                  >
                                    材料类型 2
                                    <span
                                      className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                    >
                                       
                                      *
                                    </span>
                                  </label>
                                </ForwardRef(FormLabel)>
                              </WithStyles(ForwardRef(FormLabel))>
                            </ForwardRef(InputLabel)>
                          </WithStyles(ForwardRef(InputLabel))>
                          <WithStyles(ForwardRef(Input))
                            className="MuiAutocomplete-inputRoot"
                            endAdornment={
                              <React.Fragment>
                                <ForwardRef(WithStyles)
                                  className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  tabIndex={-1}
                                  title="Clear"
                                >
                                  <Memo(CloseIcon)
                                    fontSize="small"
                                  />
                                </ForwardRef(WithStyles)>
                                <ForwardRef(WithStyles)
                                  className="MuiAutocomplete-popupIndicator"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  tabIndex={-1}
                                  title="Open popup"
                                >
                                  <Memo(ArrowDropDownIcon) />
                                </ForwardRef(WithStyles)>
                              </React.Fragment>
                            }
                            fullWidth={true}
                            inputProps={
                              Object {
                                "aria-autocomplete": "list",
                                "aria-controls": "material-type-listbox",
                                "autoCapitalize": "none",
                                "autoComplete": "disabled",
                                "autoCorrect": "off",
                                "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                "id": "material-type",
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onFocus": [Function],
                                "ref": Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-controls="material-type-listbox"
                                    aria-invalid="false"
                                    autocapitalize="none"
                                    autocomplete="disabled"
                                    autocorrect="off"
                                    class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                    id="material-type"
                                    required=""
                                    spellcheck="false"
                                    type="text"
                                    value=""
                                  />,
                                },
                                "spellCheck": "false",
                                "value": undefined,
                              }
                            }
                          >
                            <ForwardRef(Input)
                              className="MuiAutocomplete-inputRoot"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInput-formControl",
                                  "fullWidth": "MuiInput-fullWidth",
                                  "input": "MuiInput-input",
                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                  "multiline": "MuiInput-multiline",
                                  "root": "MuiInput-root",
                                  "underline": "MuiInput-underline",
                                }
                              }
                              endAdornment={
                                <React.Fragment>
                                  <ForwardRef(WithStyles)
                                    className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                    tabIndex={-1}
                                    title="Clear"
                                  >
                                    <Memo(CloseIcon)
                                      fontSize="small"
                                    />
                                  </ForwardRef(WithStyles)>
                                  <ForwardRef(WithStyles)
                                    className="MuiAutocomplete-popupIndicator"
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                    tabIndex={-1}
                                    title="Open popup"
                                  >
                                    <Memo(ArrowDropDownIcon) />
                                  </ForwardRef(WithStyles)>
                                </React.Fragment>
                              }
                              fullWidth={true}
                              inputProps={
                                Object {
                                  "aria-autocomplete": "list",
                                  "aria-controls": "material-type-listbox",
                                  "autoCapitalize": "none",
                                  "autoComplete": "disabled",
                                  "autoCorrect": "off",
                                  "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                  "id": "material-type",
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onFocus": [Function],
                                  "ref": Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-controls="material-type-listbox"
                                      aria-invalid="false"
                                      autocapitalize="none"
                                      autocomplete="disabled"
                                      autocorrect="off"
                                      class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                      id="material-type"
                                      required=""
                                      spellcheck="false"
                                      type="text"
                                      value=""
                                    />,
                                  },
                                  "spellCheck": "false",
                                  "value": undefined,
                                }
                              }
                            >
                              <WithStyles(ForwardRef(InputBase))
                                className="MuiAutocomplete-inputRoot"
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInput-formControl",
                                    "fullWidth": "MuiInput-fullWidth",
                                    "input": "MuiInput-input",
                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                    "multiline": "MuiInput-multiline",
                                    "root": "MuiInput-root MuiInput-underline",
                                    "underline": null,
                                  }
                                }
                                endAdornment={
                                  <React.Fragment>
                                    <ForwardRef(WithStyles)
                                      className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      tabIndex={-1}
                                      title="Clear"
                                    >
                                      <Memo(CloseIcon)
                                        fontSize="small"
                                      />
                                    </ForwardRef(WithStyles)>
                                    <ForwardRef(WithStyles)
                                      className="MuiAutocomplete-popupIndicator"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      tabIndex={-1}
                                      title="Open popup"
                                    >
                                      <Memo(ArrowDropDownIcon) />
                                    </ForwardRef(WithStyles)>
                                  </React.Fragment>
                                }
                                fullWidth={true}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-autocomplete": "list",
                                    "aria-controls": "material-type-listbox",
                                    "autoCapitalize": "none",
                                    "autoComplete": "disabled",
                                    "autoCorrect": "off",
                                    "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                    "id": "material-type",
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onFocus": [Function],
                                    "ref": Object {
                                      "current": <input
                                        aria-autocomplete="list"
                                        aria-controls="material-type-listbox"
                                        aria-invalid="false"
                                        autocapitalize="none"
                                        autocomplete="disabled"
                                        autocorrect="off"
                                        class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                        id="material-type"
                                        required=""
                                        spellcheck="false"
                                        type="text"
                                        value=""
                                      />,
                                    },
                                    "spellCheck": "false",
                                    "value": undefined,
                                  }
                                }
                                multiline={false}
                                type="text"
                              >
                                <ForwardRef(InputBase)
                                  className="MuiAutocomplete-inputRoot"
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiInputBase-adornedEnd",
                                      "adornedStart": "MuiInputBase-adornedStart",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "focused": "Mui-focused Mui-focused",
                                      "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                      "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                      "input": "MuiInputBase-input MuiInput-input",
                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                      "inputSelect": "MuiInputBase-inputSelect",
                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInputBase-marginDense",
                                      "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                      "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                    }
                                  }
                                  endAdornment={
                                    <React.Fragment>
                                      <ForwardRef(WithStyles)
                                        className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                        tabIndex={-1}
                                        title="Clear"
                                      >
                                        <Memo(CloseIcon)
                                          fontSize="small"
                                        />
                                      </ForwardRef(WithStyles)>
                                      <ForwardRef(WithStyles)
                                        className="MuiAutocomplete-popupIndicator"
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                        tabIndex={-1}
                                        title="Open popup"
                                      >
                                        <Memo(ArrowDropDownIcon) />
                                      </ForwardRef(WithStyles)>
                                    </React.Fragment>
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  inputProps={
                                    Object {
                                      "aria-autocomplete": "list",
                                      "aria-controls": "material-type-listbox",
                                      "autoCapitalize": "none",
                                      "autoComplete": "disabled",
                                      "autoCorrect": "off",
                                      "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                                      "id": "material-type",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onFocus": [Function],
                                      "ref": Object {
                                        "current": <input
                                          aria-autocomplete="list"
                                          aria-controls="material-type-listbox"
                                          aria-invalid="false"
                                          autocapitalize="none"
                                          autocomplete="disabled"
                                          autocorrect="off"
                                          class="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                          id="material-type"
                                          required=""
                                          spellcheck="false"
                                          type="text"
                                          value=""
                                        />,
                                      },
                                      "spellCheck": "false",
                                      "value": undefined,
                                    }
                                  }
                                  multiline={false}
                                  type="text"
                                >
                                  <div
                                    className="MuiInputBase-root MuiInput-root MuiInput-underline MuiAutocomplete-inputRoot MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                    onClick={[Function]}
                                  >
                                    <input
                                      aria-autocomplete="list"
                                      aria-controls="material-type-listbox"
                                      aria-invalid={false}
                                      autoCapitalize="none"
                                      autoComplete="disabled"
                                      autoCorrect="off"
                                      className="MuiInputBase-input MuiInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd"
                                      disabled={false}
                                      id="material-type"
                                      onAnimationStart={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={true}
                                      spellCheck="false"
                                      type="text"
                                    />
                                    <WithStyles(ForwardRef(IconButton))
                                      className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      tabIndex={-1}
                                      title="Clear"
                                    >
                                      <ForwardRef(IconButton)
                                        className="MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                        classes={
                                          Object {
                                            "colorInherit": "MuiIconButton-colorInherit",
                                            "colorPrimary": "MuiIconButton-colorPrimary",
                                            "colorSecondary": "MuiIconButton-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "edgeEnd": "MuiIconButton-edgeEnd",
                                            "edgeStart": "MuiIconButton-edgeStart",
                                            "label": "MuiIconButton-label",
                                            "root": "MuiIconButton-root",
                                            "sizeSmall": "MuiIconButton-sizeSmall",
                                          }
                                        }
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                        tabIndex={-1}
                                        title="Clear"
                                      >
                                        <WithStyles(ForwardRef(ButtonBase))
                                          centerRipple={true}
                                          className="MuiIconButton-root MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                          disabled={false}
                                          focusRipple={true}
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                          tabIndex={-1}
                                          title="Clear"
                                        >
                                          <ForwardRef(ButtonBase)
                                            centerRipple={true}
                                            className="MuiIconButton-root MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                            classes={
                                              Object {
                                                "disabled": "Mui-disabled",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiButtonBase-root",
                                              }
                                            }
                                            disabled={false}
                                            focusRipple={true}
                                            onClick={[Function]}
                                            onMouseDown={[Function]}
                                            tabIndex={-1}
                                            title="Clear"
                                          >
                                            <button
                                              className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-clearIndicator MuiAutocomplete-clearIndicatorDirty"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onDragLeave={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              tabIndex={-1}
                                              title="Clear"
                                              type="button"
                                            >
                                              <span
                                                className="MuiIconButton-label"
                                              >
                                                <ForwardRef
                                                  fontSize="small"
                                                >
                                                  <WithStyles(ForwardRef(SvgIcon))
                                                    fontSize="small"
                                                  >
                                                    <ForwardRef(SvgIcon)
                                                      classes={
                                                        Object {
                                                          "colorAction": "MuiSvgIcon-colorAction",
                                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                          "colorError": "MuiSvgIcon-colorError",
                                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                          "root": "MuiSvgIcon-root",
                                                        }
                                                      }
                                                      fontSize="small"
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className="MuiSvgIcon-root MuiSvgIcon-fontSizeSmall"
                                                        focusable="false"
                                                        role="presentation"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <path
                                                          d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                        />
                                                      </svg>
                                                    </ForwardRef(SvgIcon)>
                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                </ForwardRef>
                                              </span>
                                              <NoSsr>
                                                <WithStyles(undefined)
                                                  center={true}
                                                >
                                                  <ForwardRef(TouchRipple)
                                                    center={true}
                                                    classes={
                                                      Object {
                                                        "child": "MuiTouchRipple-child",
                                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                                        "ripple": "MuiTouchRipple-ripple",
                                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                        "root": "MuiTouchRipple-root",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="MuiTouchRipple-root"
                                                    >
                                                      <TransitionGroup
                                                        childFactory={[Function]}
                                                        component={null}
                                                        exit={true}
                                                      />
                                                    </span>
                                                  </ForwardRef(TouchRipple)>
                                                </WithStyles(undefined)>
                                              </NoSsr>
                                            </button>
                                          </ForwardRef(ButtonBase)>
                                        </WithStyles(ForwardRef(ButtonBase))>
                                      </ForwardRef(IconButton)>
                                    </WithStyles(ForwardRef(IconButton))>
                                    <WithStyles(ForwardRef(IconButton))
                                      className="MuiAutocomplete-popupIndicator"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      tabIndex={-1}
                                      title="Open popup"
                                    >
                                      <ForwardRef(IconButton)
                                        className="MuiAutocomplete-popupIndicator"
                                        classes={
                                          Object {
                                            "colorInherit": "MuiIconButton-colorInherit",
                                            "colorPrimary": "MuiIconButton-colorPrimary",
                                            "colorSecondary": "MuiIconButton-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "edgeEnd": "MuiIconButton-edgeEnd",
                                            "edgeStart": "MuiIconButton-edgeStart",
                                            "label": "MuiIconButton-label",
                                            "root": "MuiIconButton-root",
                                            "sizeSmall": "MuiIconButton-sizeSmall",
                                          }
                                        }
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                        tabIndex={-1}
                                        title="Open popup"
                                      >
                                        <WithStyles(ForwardRef(ButtonBase))
                                          centerRipple={true}
                                          className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                          disabled={false}
                                          focusRipple={true}
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                          tabIndex={-1}
                                          title="Open popup"
                                        >
                                          <ForwardRef(ButtonBase)
                                            centerRipple={true}
                                            className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                            classes={
                                              Object {
                                                "disabled": "Mui-disabled",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiButtonBase-root",
                                              }
                                            }
                                            disabled={false}
                                            focusRipple={true}
                                            onClick={[Function]}
                                            onMouseDown={[Function]}
                                            tabIndex={-1}
                                            title="Open popup"
                                          >
                                            <button
                                              className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-popupIndicator"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onDragLeave={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              tabIndex={-1}
                                              title="Open popup"
                                              type="button"
                                            >
                                              <span
                                                className="MuiIconButton-label"
                                              >
                                                <ForwardRef>
                                                  <WithStyles(ForwardRef(SvgIcon))>
                                                    <ForwardRef(SvgIcon)
                                                      classes={
                                                        Object {
                                                          "colorAction": "MuiSvgIcon-colorAction",
                                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                          "colorError": "MuiSvgIcon-colorError",
                                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                          "root": "MuiSvgIcon-root",
                                                        }
                                                      }
                                                    >
                                                      <svg
                                                        aria-hidden="true"
                                                        className="MuiSvgIcon-root"
                                                        focusable="false"
                                                        role="presentation"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <path
                                                          d="M7 10l5 5 5-5z"
                                                        />
                                                      </svg>
                                                    </ForwardRef(SvgIcon)>
                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                </ForwardRef>
                                              </span>
                                              <NoSsr>
                                                <WithStyles(undefined)
                                                  center={true}
                                                >
                                                  <ForwardRef(TouchRipple)
                                                    center={true}
                                                    classes={
                                                      Object {
                                                        "child": "MuiTouchRipple-child",
                                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                                        "ripple": "MuiTouchRipple-ripple",
                                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                        "root": "MuiTouchRipple-root",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="MuiTouchRipple-root"
                                                    >
                                                      <TransitionGroup
                                                        childFactory={[Function]}
                                                        component={null}
                                                        exit={true}
                                                      />
                                                    </span>
                                                  </ForwardRef(TouchRipple)>
                                                </WithStyles(undefined)>
                                              </NoSsr>
                                            </button>
                                          </ForwardRef(ButtonBase)>
                                        </WithStyles(ForwardRef(ButtonBase))>
                                      </ForwardRef(IconButton)>
                                    </WithStyles(ForwardRef(IconButton))>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(Input)>
                          </WithStyles(ForwardRef(Input))>
                        </div>
                      </ForwardRef(FormControl)>
                    </WithStyles(ForwardRef(FormControl))>
                  </ForwardRef(TextField)>
                </WithStyles(ForwardRef(TextField))>
              </div>
            </ForwardRef(Autocomplete)>
          </WithStyles(ForwardRef(Autocomplete))>
          <WithStyles(ForwardRef(FormHelperText))>
            <ForwardRef(FormHelperText)
              classes={
                Object {
                  "contained": "MuiFormHelperText-contained",
                  "disabled": "Mui-disabled",
                  "error": "Mui-error",
                  "filled": "MuiFormHelperText-filled",
                  "focused": "Mui-focused",
                  "marginDense": "MuiFormHelperText-marginDense",
                  "required": "Mui-required",
                  "root": "MuiFormHelperText-root",
                }
              }
            >
              <p
                className="MuiFormHelperText-root"
              >
                error
              </p>
            </ForwardRef(FormHelperText)>
          </WithStyles(ForwardRef(FormHelperText))>
        </div>
      </ForwardRef(FormControl)>
    </WithStyles(ForwardRef(FormControl))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      xs={6}
    >
      <ForwardRef(Grid)
        classes={
          Object {
            "align-content-xs-center": "MuiGrid-align-content-xs-center",
            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
            "align-items-xs-center": "MuiGrid-align-items-xs-center",
            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
            "container": "MuiGrid-container",
            "direction-xs-column": "MuiGrid-direction-xs-column",
            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
            "grid-lg-1": "MuiGrid-grid-lg-1",
            "grid-lg-10": "MuiGrid-grid-lg-10",
            "grid-lg-11": "MuiGrid-grid-lg-11",
            "grid-lg-12": "MuiGrid-grid-lg-12",
            "grid-lg-2": "MuiGrid-grid-lg-2",
            "grid-lg-3": "MuiGrid-grid-lg-3",
            "grid-lg-4": "MuiGrid-grid-lg-4",
            "grid-lg-5": "MuiGrid-grid-lg-5",
            "grid-lg-6": "MuiGrid-grid-lg-6",
            "grid-lg-7": "MuiGrid-grid-lg-7",
            "grid-lg-8": "MuiGrid-grid-lg-8",
            "grid-lg-9": "MuiGrid-grid-lg-9",
            "grid-lg-auto": "MuiGrid-grid-lg-auto",
            "grid-lg-true": "MuiGrid-grid-lg-true",
            "grid-md-1": "MuiGrid-grid-md-1",
            "grid-md-10": "MuiGrid-grid-md-10",
            "grid-md-11": "MuiGrid-grid-md-11",
            "grid-md-12": "MuiGrid-grid-md-12",
            "grid-md-2": "MuiGrid-grid-md-2",
            "grid-md-3": "MuiGrid-grid-md-3",
            "grid-md-4": "MuiGrid-grid-md-4",
            "grid-md-5": "MuiGrid-grid-md-5",
            "grid-md-6": "MuiGrid-grid-md-6",
            "grid-md-7": "MuiGrid-grid-md-7",
            "grid-md-8": "MuiGrid-grid-md-8",
            "grid-md-9": "MuiGrid-grid-md-9",
            "grid-md-auto": "MuiGrid-grid-md-auto",
            "grid-md-true": "MuiGrid-grid-md-true",
            "grid-sm-1": "MuiGrid-grid-sm-1",
            "grid-sm-10": "MuiGrid-grid-sm-10",
            "grid-sm-11": "MuiGrid-grid-sm-11",
            "grid-sm-12": "MuiGrid-grid-sm-12",
            "grid-sm-2": "MuiGrid-grid-sm-2",
            "grid-sm-3": "MuiGrid-grid-sm-3",
            "grid-sm-4": "MuiGrid-grid-sm-4",
            "grid-sm-5": "MuiGrid-grid-sm-5",
            "grid-sm-6": "MuiGrid-grid-sm-6",
            "grid-sm-7": "MuiGrid-grid-sm-7",
            "grid-sm-8": "MuiGrid-grid-sm-8",
            "grid-sm-9": "MuiGrid-grid-sm-9",
            "grid-sm-auto": "MuiGrid-grid-sm-auto",
            "grid-sm-true": "MuiGrid-grid-sm-true",
            "grid-xl-1": "MuiGrid-grid-xl-1",
            "grid-xl-10": "MuiGrid-grid-xl-10",
            "grid-xl-11": "MuiGrid-grid-xl-11",
            "grid-xl-12": "MuiGrid-grid-xl-12",
            "grid-xl-2": "MuiGrid-grid-xl-2",
            "grid-xl-3": "MuiGrid-grid-xl-3",
            "grid-xl-4": "MuiGrid-grid-xl-4",
            "grid-xl-5": "MuiGrid-grid-xl-5",
            "grid-xl-6": "MuiGrid-grid-xl-6",
            "grid-xl-7": "MuiGrid-grid-xl-7",
            "grid-xl-8": "MuiGrid-grid-xl-8",
            "grid-xl-9": "MuiGrid-grid-xl-9",
            "grid-xl-auto": "MuiGrid-grid-xl-auto",
            "grid-xl-true": "MuiGrid-grid-xl-true",
            "grid-xs-1": "MuiGrid-grid-xs-1",
            "grid-xs-10": "MuiGrid-grid-xs-10",
            "grid-xs-11": "MuiGrid-grid-xs-11",
            "grid-xs-12": "MuiGrid-grid-xs-12",
            "grid-xs-2": "MuiGrid-grid-xs-2",
            "grid-xs-3": "MuiGrid-grid-xs-3",
            "grid-xs-4": "MuiGrid-grid-xs-4",
            "grid-xs-5": "MuiGrid-grid-xs-5",
            "grid-xs-6": "MuiGrid-grid-xs-6",
            "grid-xs-7": "MuiGrid-grid-xs-7",
            "grid-xs-8": "MuiGrid-grid-xs-8",
            "grid-xs-9": "MuiGrid-grid-xs-9",
            "grid-xs-auto": "MuiGrid-grid-xs-auto",
            "grid-xs-true": "MuiGrid-grid-xs-true",
            "item": "MuiGrid-item",
            "justify-xs-center": "MuiGrid-justify-xs-center",
            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
            "root": "MuiGrid-root",
            "spacing-xs-1": "MuiGrid-spacing-xs-1",
            "spacing-xs-10": "MuiGrid-spacing-xs-10",
            "spacing-xs-2": "MuiGrid-spacing-xs-2",
            "spacing-xs-3": "MuiGrid-spacing-xs-3",
            "spacing-xs-4": "MuiGrid-spacing-xs-4",
            "spacing-xs-5": "MuiGrid-spacing-xs-5",
            "spacing-xs-6": "MuiGrid-spacing-xs-6",
            "spacing-xs-7": "MuiGrid-spacing-xs-7",
            "spacing-xs-8": "MuiGrid-spacing-xs-8",
            "spacing-xs-9": "MuiGrid-spacing-xs-9",
            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
            "zeroMinWidth": "MuiGrid-zeroMinWidth",
          }
        }
        item={true}
        xs={6}
      >
        <div
          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6"
        >
          <WithStyles(ForwardRef(FormControl))
            className="makeStyles-formControl-3"
            error={false}
            fullWidth={true}
            required={true}
          >
            <ForwardRef(FormControl)
              className="makeStyles-formControl-3"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              error={false}
              fullWidth={true}
              required={true}
            >
              <div
                className="MuiFormControl-root makeStyles-formControl-3 MuiFormControl-fullWidth"
              >
                <WithStyles(ForwardRef(InputLabel))>
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                        >
                          单价
                          <span
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      元/kg
                    </ForwardRef(WithStyles)>
                  }
                  onChange={[Function]}
                  value={100}
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        元/kg
                      </ForwardRef(WithStyles)>
                    }
                    onChange={[Function]}
                    value={100}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      endAdornment={
                        <ForwardRef(WithStyles)
                          position="end"
                        >
                          元/kg
                        </ForwardRef(WithStyles)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value={100}
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputSelect": "MuiInputBase-inputSelect",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            元/kg
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={false}
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value={100}
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            disabled={false}
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                            value={100}
                          />
                          <WithStyles(ForwardRef(InputAdornment))
                            position="end"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                  "filled": "MuiInputAdornment-filled",
                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                  "marginDense": "MuiInputAdornment-marginDense",
                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                  "positionStart": "MuiInputAdornment-positionStart",
                                  "root": "MuiInputAdornment-root",
                                }
                              }
                              position="end"
                            >
                              <div
                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  color="textSecondary"
                                >
                                  <ForwardRef(Typography)
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="textSecondary"
                                  >
                                    <p
                                      className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                    >
                                      元/kg
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
                <WithStyles(ForwardRef(FormHelperText))>
                  <ForwardRef(FormHelperText)
                    classes={
                      Object {
                        "contained": "MuiFormHelperText-contained",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiFormHelperText-filled",
                        "focused": "Mui-focused",
                        "marginDense": "MuiFormHelperText-marginDense",
                        "required": "Mui-required",
                        "root": "MuiFormHelperText-root",
                      }
                    }
                  >
                    <p
                      className="MuiFormHelperText-root MuiFormHelperText-filled Mui-required"
                    >
                      error
                    </p>
                  </ForwardRef(FormHelperText)>
                </WithStyles(ForwardRef(FormHelperText))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </div>
      </ForwardRef(Grid)>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(FormControl))
      className="makeStyles-formControl-3"
      fullWidth={true}
    >
      <ForwardRef(FormControl)
        className="makeStyles-formControl-3"
        classes={
          Object {
            "fullWidth": "MuiFormControl-fullWidth",
            "marginDense": "MuiFormControl-marginDense",
            "marginNormal": "MuiFormControl-marginNormal",
            "root": "MuiFormControl-root",
          }
        }
        fullWidth={true}
      >
        <div
          className="MuiFormControl-root makeStyles-formControl-3 MuiFormControl-fullWidth"
        >
          <WithStyles(ForwardRef(Button))
            color="primary"
            onClick={[MockFunction]}
            variant="contained"
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              onClick={[MockFunction]}
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[MockFunction]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[MockFunction]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[MockFunction]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      提交
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
      </ForwardRef(FormControl)>
    </WithStyles(ForwardRef(FormControl))>
  </div>
</StockAndShipment>
`;
